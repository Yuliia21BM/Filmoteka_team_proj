{"mappings":"gfAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,0JCAzD,IAAAC,EAAAJ,EAAA,SCAAK,EAAAL,EAAA,SCAO,MAAMM,EAAO,CAChBC,gBAAiBC,SAASC,cAAc,2BACxCC,WAAYF,SAASC,cAAc,WACnCE,YAAaH,SAASC,cAAc,0B,iBDKjCG,eAAeC,EAAgBC,GACpC,MAAMC,EAAWD,EACdE,KAAIC,GAUF,SAA6BC,GAClC,MAAMC,YAAEA,EAAWC,GAAEA,EAAEC,MAAEA,EAAKC,UAAEA,EAASC,aAAEA,EAAYC,aAAEA,GACvDN,EAEIO,EAAa,kCACnB,IAAIC,EAAY,GAEhB,MAAMC,EAAgB,IAAM,sHAEwCT,EAAKE,2BAEjEF,EAAKC,YAAcM,EAAaP,EAAKC,YAAcS,EAAAC,cAAcC,aAEvEZ,EAAKG,MAAQH,EAAKG,MAAQ,iJAG1BH,EAAKa,SAAWb,EAAKa,SAAW,2GAGsCb,EAAKE,wDAEnEF,EAAKG,MAAQH,EAAKG,MAAQ,6FAI1BH,EAAKI,UAAYI,EAAY,eACzBR,EAAKK,aAAeL,EAAKK,aAAaS,MAAM,EAAG,GAAK,4EAGlDd,EAAKM,aAAeN,EAAKM,aAAaS,QAAQ,GAAK,4EAM7DC,EAAoB,IAAM,sHAEoChB,EAAKE,2BAEjEF,EAAKC,YAAcM,EAAaP,EAAKC,YAAcS,EAAAC,cAAcC,aAEvEZ,EAAKG,MAAQH,EAAKG,MAAQ,iJAG1BH,EAAKa,SAAWb,EAAKa,SAAW,2GAGsCb,EAAKE,wDAEnEF,EAAKG,MAAQH,EAAKG,MAAQ,6FAI1BH,EAAKI,UAAYI,EAAY,eACzBR,EAAKK,aAAeL,EAAKK,aAAaS,MAAM,EAAG,GAAK,4EAGlDd,EAAKM,aAAeN,EAAKM,aAAaS,QAAQ,GAAK,4EAMnE,IAAKX,EAGH,OAFAI,EAAYR,EAAKiB,OAEVD,IAEPR,EADSJ,EAAUc,QAAU,EACjBd,EAAUN,KAAIqB,GAASC,EAAUC,IAAIF,KAAQG,KAAK,MAG5DF,EAAUC,IAAIjB,EAAU,IACxB,KACAgB,EAAUC,IAAIjB,EAAU,IACxB,UAEJ,OAAOK,GACT,CAtFac,CAAoBxB,KAE5BuB,KAAK,IAEIlC,EAAKC,gBAVdmC,UAAY,GAYfpC,EAAKC,gBAAgBoC,mBAAmB,YAAa5B,EACvD,CAiFA,MAAMuB,EAAY,IAAIM,KAEtB,EAAAvC,EAAAwC,gBAAeC,MAAKC,GACXA,EAAIZ,OAAOnB,KAAI,EAACI,GAAEA,EAAE4B,KAAEA,MAC3BV,EAAUW,IAAI7B,EAAI4B,EAAA,M,MEvGtBE,EAAiBlD,EAAA,SAAAmD,aAA6C,SAAWnD,EAAA,SAAAoD,QAA6C,SF2G/G,MAAMC,EAAuB,KAClC,MAAMC,EAAc9C,SAAS+C,cAAc,OAC3CD,EAAYxB,IAAG,IAAA0B,IAAAN,GAEfI,EAAYG,IAAM,wDAElBnD,EAAKC,gBAAgBmC,UAAY,iDACjBY,EAAYI,0EAEX,EGjHY,CAAAC,IAC7B,IACE,MAAMC,EAAYC,aAAaC,QAAQH,GAGvC,IAAKC,EAEH,YADAP,IAMFxC,EAFgBX,KAAKC,MAAMyD,GAK7B,CAFE,MAAOG,GACPC,QAAQD,MAAM,UAAWA,EAAME,QACjC,GJkBF,CAAgB7D,EAAA8D,Y","sources":["node_modules/@parcel/runtime-js/lib/runtime-67bf5b7cde6a1d30.js","src/js/library-queue-list.js","src/js/render-card.js","src/js/refs.js","node_modules/@parcel/runtime-js/lib/runtime-9d7265d3d587a24d.js","src/js/localstorage-load-films.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2Y0K8\\\":\\\"library.5df490fb.js\\\",\\\"5tlci\\\":\\\"not-found-gif.2777c0e4.gif\\\",\\\"2i8Kt\\\":\\\"library.121cbcdd.js\\\"}\"));","import { QUEUE_LIST } from './config';\nimport { loadFromStorage } from './localstorage-load-films';\n\n// -------------üëá–¶–µ mockup data, –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ localStorage ------------\nconst movie = [\n  {\n    id: 13,\n    title: 'Test Movie1',\n    genres: 'Drama, Family, Thriller',\n    poster_path: '/1NqwE6LP9IEdOZ57NCT51ftHtWT.jpg',\n    vote_average: '6.2',\n    release_date: '2011-11-02',\n  },\n  {\n    id: 2,\n    title: 'Test Movie2',\n    genres: 'Comedy, Family, Romance',\n    poster_path: '/7CNCv9uhqdwK7Fv4bR4nmDysnd9.jpg',\n    vote_average: '7.8',\n    release_date: '2008-11-02',\n  },\n  {\n    id: 2,\n    title: 'Test Movie2',\n    genres: 'Comedy, Family, Romance',\n    poster_path: '/7CNCv9uhqdwK7Fv4bR4nmDysnd9.jpg',\n    vote_average: '7.8',\n    release_date: '2008-11-02',\n  },\n];\n// localStorage.setItem(QUEUE_LIST, JSON.stringify(movie));\n// localStorage.removeItem(QUEUE_LIST);\n// -------------‚òù–¶–µ mockup data, –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ localStorage -------------\n\n// STARTS HERE <================================================================<<<<\n\nloadFromStorage(QUEUE_LIST);\n","import { searchGenres } from './fetchApi';\nimport { refs } from './refs';\nimport { defaultPoster } from './create-images-for-js-input';\n\nexport const clearMarkup = el => {\n  el.innerHTML = '';\n};\n\nexport async function renderFilmCards(elem) {\n  const allCards = elem\n    .map(film => {\n      return createElementsMovie(film);\n    })\n    .join('');\n\n  clearMarkup(refs.mainContainerEl);\n\n  refs.mainContainerEl.insertAdjacentHTML('beforeend', allCards);\n}\n\nexport function createElementsMovie(data) {\n  const { poster_path, id, title, genre_ids, release_date, vote_average } =\n    data;\n\n  const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n  let genreFilm = '';\n\n  const markupFromAPI = () => `\n  <li class=\"main-section__card-conteiner\">\n  <div class=\"main-section__card main-section__popup\" data-film-id=\"${data.id}\">\n        <img src=\"${\n          data.poster_path ? POSTER_URL + data.poster_path : defaultPoster.src\n        }\" alt=\"${\n    data.title ? data.title : 'Unknown'\n  }\" class=\"main-section__image\" loading=\"lazy\">\n  <p class=\"main-section__popup-title\"> <span class = \"popUp-title\">About</span> <br/>${\n    data.overview ? data.overview : 'No description'\n  }</p>\n  </div>\n      <div class=\"main-section__card main-section__cards\" data-film-id=\"${data.id}\">\n\t\t\t\t\t<h2 class=\"main-section__card-title\">${\n            data.title ? data.title : 'Unknown title'\n          }</h2>\n                   \n\t\t\t\t\t<p class=\"main-section__description\">${\n            data.genre_ids ? genreFilm : 'Unknown'\n          } | ${data.release_date ? data.release_date.slice(0, 4) : 'n/a'}\n\t\t\t\t\n                <span class=\"main-section__card-rating\">${\n                  data.vote_average ? data.vote_average.toFixed(1) : '0.0'\n                }</span>\n                </p>\n      </div>             \n    </div>`;\n\n  const markupFromStorage = () => `\n  <li class=\"main-section__card-conteiner\">\n  <div class=\"main-section__card main-section__popup\" data-film-id=\"${data.id}\">\n        <img src=\"${\n          data.poster_path ? POSTER_URL + data.poster_path : defaultPoster.src\n        }\" alt=\"${\n    data.title ? data.title : 'Unknown'\n  }\" class=\"main-section__image\" loading=\"lazy\">\n  <p class=\"main-section__popup-title\"> <span class = \"popUp-title\">About</span> <br/>${\n    data.overview ? data.overview : 'No description'\n  }</p>\n  </div>\n      <div class=\"main-section__card main-section__cards\" data-film-id=\"${data.id}\">\n\t\t\t\t\t<h2 class=\"main-section__card-title\">${\n            data.title ? data.title : 'Unknown title'\n          }</h2>\n                   \n\t\t\t\t\t<p class=\"main-section__description\">${\n            data.genre_ids ? genreFilm : 'Unknown'\n          } | ${data.release_date ? data.release_date.slice(0, 4) : 'n/a'}\n\t\t\t\t\n                <span class=\"main-section__card-rating\">${\n                  data.vote_average ? data.vote_average.toFixed(1) : '0.0'\n                }</span>\n                </p>\n      </div>             \n    </div>`;\n\n  if (!genre_ids) {\n    genreFilm = data.genres;\n\n    return markupFromStorage();\n  } else if (genre_ids.length <= 3) {\n    genreFilm = genre_ids.map(genre => allGenres.get(genre)).join(', ');\n  } else {\n    genreFilm =\n      allGenres.get(genre_ids[0]) +\n      ', ' +\n      allGenres.get(genre_ids[1]) +\n      ', Other';\n  }\n  return markupFromAPI();\n}\n\nconst allGenres = new Map();\n\nsearchGenres().then(res => {\n  return res.genres.map(({ id, name }) => {\n    allGenres.set(id, name);\n  });\n});\n\nexport const renderNoMoviesMarkup = () => {\n  const notFoundGIF = document.createElement('img');\n  notFoundGIF.src = new URL('../images/not-found-gif.gif', import.meta.url);\n\n  notFoundGIF.alt = 'Travolta from Pulp Fiction is searching for something';\n\n  refs.mainContainerEl.innerHTML = `<div class=\"no-movies-wrap\">\n                ${notFoundGIF.outerHTML}\n                <p>No movies here yet</p>\n            </div>`;\n};\n","export const refs = {\n    mainContainerEl: document.querySelector('.main-section__allcards'),\n    searchForm: document.querySelector('.search'),\n    input_error: document.querySelector('.warning-notification'),\n    \n}\n\n","module.exports = require('./helpers/bundle-url').getBundleURL('2Y0K8') + require('./helpers/bundle-manifest').resolve(\"5tlci\");","import { renderFilmCards, renderNoMoviesMarkup } from './render-card';\n\n// Returns parsed data from Local Storage\nexport const loadFromStorage = key => {\n  try {\n    const savedData = localStorage.getItem(key);\n\n    // If there are no movies added to list in Local Storage, show Travolta GIF from Pulp Fiction\n    if (!savedData) {\n      renderNoMoviesMarkup();\n      return;\n    }\n\n    let movieList = JSON.parse(savedData);\n\n    renderFilmCards(movieList);\n  } catch (error) {\n    console.error('Error: ', error.message);\n  }\n};\n"],"names":["parcelRequire","register","JSON","parse","$ebqVR","$sRYpV","$37e33676934ad046$export$21666b427502ea6d","mainContainerEl","document","querySelector","searchForm","input_error","async","$91ea48cd49373332$export$e6243425577ce802","elem","allCards","map","film","data","poster_path","id","title","genre_ids","release_date","vote_average","POSTER_URL","genreFilm","markupFromAPI","$3dy0j","defaultPoster","src","overview","slice","toFixed","markupFromStorage","genres","length","genre","$91ea48cd49373332$var$allGenres","get","join","$91ea48cd49373332$export$53e42f87dd0e8976","innerHTML","insertAdjacentHTML","Map","searchGenres","then","res","name","set","$5cf33549d7aa9dd8$exports","getBundleURL","resolve","$91ea48cd49373332$export$8e1999a21786fe69","notFoundGIF","createElement","URL","alt","outerHTML","key","savedData","localStorage","getItem","error","console","message","QUEUE_LIST"],"version":3,"file":"library.5df490fb.js.map"}